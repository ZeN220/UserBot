from vkwave.api.methods._error import APIError
from vkwave.bots import (
    simple_user_message_handler,
    SimpleUserEvent,
    FromMeFilter,
    MessageFromConversationTypeFilter,
    TextStartswithFilter,
    ReplyMessageFilter,
    TextFilter
)

from utils import bot, config, get_user_id
from dispatching import Router


my_id = config['VK']['user_id']
social_router = Router(
    'social',
    '–ö–æ–º–∞–Ω–¥—ã –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.'
)
social_router.registrar.add_default_filter(FromMeFilter(True))


@social_router.message_handler(
    TextStartswithFilter(['.–¥–æ–±–∞–≤–∏—Ç—å', '.invite', '.–ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å', '.–∏–Ω–≤–∞–π—Ç']),
    MessageFromConversationTypeFilter(from_what='from_chat')
)
async def invite(event: SimpleUserEvent):
    peer_id = event.object.object.peer_id
    user_id = await get_user_id(event)

    try:
        await event.api_ctx.messages.add_chat_user(
            chat_id=peer_id - 2e9,
            user_id=user_id
        )
        await bot.api_context.messages.send(
            message=f'[üîß] [id{user_id}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] '
                    f'—É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–µ—Å–µ–¥—É.',
            peer_id=my_id,
            random_id=0
        )

    except APIError:
        await bot.api_context.messages.send(
            message=f'[üîß] –û—à–∏–±–∫–∞! '
                    f'[id{user_id}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] '
                    f'–ª–∏–±–æ —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –±–µ—Å–µ–¥–µ, '
                    f'–ª–∏–±–æ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥—Ä—É–∑—å—è—Ö.',
            peer_id=my_id,
            random_id=0
        )


@social_router.message_handler(
    MessageFromConversationTypeFilter(from_what='from_chat'),
    TextFilter('+–¥—Ä')
)
async def fr_add(event: SimpleUserEvent):
    user_id = await get_user_id(event)

    try:
        await event.api_ctx.friends.add(user_id=user_id)
        await bot.api_context.messages.send(
            peer_id=my_id,
            message=f'[‚ôª] [id{user_id}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] '
                    f'–¥–æ–±–∞–≤–ª–µ–Ω –≤ –¥—Ä—É–∑—å—è.',
            random_id=0
        )

    except APIError:
        await bot.api_context.messages.send(
            peer_id=my_id,
            message=f'[üí£] [id{user_id}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] '
                    f'–ª–∏–±–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ, '
                    f'–ª–∏–±–æ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –¥—Ä—É–∑—å—è.',
            random_id=0
        )


@social_router.message_handler(
    MessageFromConversationTypeFilter(from_what='from_chat'),
    TextFilter('+—á—Å')
)
async def block_add(event: SimpleUserEvent):
    user_id = await get_user_id(event)

    try:
        await event.api_ctx.account.ban(owner_id=user_id)
        await bot.api_context.messages.send(
            peer_id=my_id,
            message=f'[üí£] [id{user_id}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] '
                    f'–¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫.',
            random_id=0
        )

    except APIError:
        await bot.api_context.messages.send(
            peer_id=my_id,
            message=f'[üí£] [id{user_id}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] '
                    f'—É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ.',
            random_id=0
        )


@social_router.message_handler(
    MessageFromConversationTypeFilter(from_what='from_chat'),
    ReplyMessageFilter(),
    TextFilter('-–¥—Ä')
)
async def fr_remove(event: SimpleUserEvent):
    user_id = await get_user_id(event)

    await event.api_ctx.friends.delete(user_id=user_id)
    await bot.api_context.messages.send(
        peer_id=my_id,
        message=f'[‚ôª] [id{user_id}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] —É–¥–∞–ª–µ–Ω –∏–∑ –¥—Ä—É–∑–µ–π.',
        random_id=0
    )


@social_router.message_handler(
    MessageFromConversationTypeFilter(from_what='from_chat'),
    TextFilter('-—á—Å')
)
async def block_remove(event: SimpleUserEvent):
    user_id = await get_user_id(event)

    try:
        await event.api_ctx.account.unban(owner_id=user_id)
        await bot.api_context.messages.send(
            peer_id=my_id,
            message=f'[üí£] [id{user_id}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] '
                    f'—É–¥–∞–ª–µ–Ω –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.',
            random_id=0
        )

    except APIError:
        await bot.api_context.messages.send(
            peer_id=my_id,
            message=f'[üí£] [id{user_id}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] '
                    f'–Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ.',
            random_id=0
        )


@simple_user_message_handler(
    social_router,
    MessageFromConversationTypeFilter(from_what='from_pm'),
    TextFilter('/—á—Å'),
)
async def block_add_ls(event: SimpleUserEvent):
    await event.api_ctx.account.ban(owner_id=event.peer_id)
    await bot.api_context.messages.send(
        peer_id=my_id,
        message=f'[üí£] [id{event.peer_id}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] '
                f'–¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫.',
        random_id=0
    )
