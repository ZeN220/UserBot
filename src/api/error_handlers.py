import json
import logging

from vkwave.api import APIOptionsRequestContext

from src.sessions.manage import SessionManager

logger = logging.getLogger(__name__)


async def user_auth_failed(_, api_ctx: APIOptionsRequestContext):
    """
    –•–µ–Ω–¥–ª–µ—Ä 5 –æ—à–∏–±–∫–æ–π –æ—Ç VK API
    """
    token = await api_ctx.api_options.get_token()
    session = SessionManager.get_session_from_token(token)

    await session.send_service_message(
        f'[üö™] –ü—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–∞—à–∞ —Å–µ—Å—Å–∏—è –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–∞.'
    )
    SessionManager.delete_session(session)


async def default_error_handler(error: dict, api_ctx: APIOptionsRequestContext):
    """
    –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ VK API
    """
    token = await api_ctx.api_options.get_token()
    session = SessionManager.get_session_from_token(token)

    method = error['error']['request_params'][0]['value']
    description = error['error']['error_msg']
    await session.send_service_message(
        f'[‚ö†] –ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–µ—Ç–æ–¥–∞ {method} –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n{description}'
    )

    error_dump = json.dumps(error, indent=2)
    logger.error(f'–û—Ç –∏–º–µ–Ω–∏ —Å–µ—Å—Å–∏–∏ [{session.owner_id}] –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n{error_dump}')


async def cant_send_message_handler(error: dict, api_ctx: APIOptionsRequestContext):
    owner_id = list(filter(
        lambda param: param['key'] == 'peer_id',
        error['error']['request_params']
    ))[0]['value']
    group = await api_ctx.groups.get_by_id()
    main_session = SessionManager.main_session

    await main_session.send_service_message(
        f'[üì©] [id{owner_id}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] –∑–∞–ø—Ä–µ—Ç–∏–ª –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å [club{group.response[0].id}|–≥—Ä—É–ø–ø–µ] —Å–æ–æ–±—â–µ–Ω–∏—è.'
    )


ERROR_HANDLERS = {
    5: user_auth_failed
}
GROUP_ERROR_HANDLERS = {901: cant_send_message_handler}
