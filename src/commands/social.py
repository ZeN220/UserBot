from typing import List, Optional

from .base import command_manager, CommandResponse, BaseHandler, Priority
from .base.filters import ParseUserFilter


@command_manager.register(
    ParseUserFilter(), name='add_friend', module='social',
    aliases=['–¥—Ä+', '–¥—Ä—É–≥+', 'fr+', 'friend+'], priority=Priority.MEDIUM, args_syntax=[r'(\d+)', '']
)
class AddFriendHandler(BaseHandler):
    async def execute(
        self,
        user_id: Optional[int] = None,
        users_ids: Optional[List[int]] = None
    ) -> CommandResponse:
        if users_ids is not None:
            for user_id in users_ids:
                await self.event.api_ctx.friends.add(user_id=user_id)
            return CommandResponse(response='[‚ôª] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –¥—Ä—É–∑—å—è.')

        await self.event.api_ctx.friends.add(user_id=user_id)
        return CommandResponse(
            response=f'[‚ôª] [id{user_id}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –¥—Ä—É–∑—å—è.'
        )


@command_manager.register(
    ParseUserFilter(), name='remove_friend', module='social',
    aliases=['–¥—Ä-', '–¥—Ä—É–≥-', 'fr-', 'friend-'], priority=Priority.MEDIUM, args_syntax=[r'(\d+)', '']
)
class RemoveFriendHandler(BaseHandler):
    async def execute(
        self,
        user_id: Optional[int] = None,
        users_ids: Optional[List[int]] = None
    ) -> CommandResponse:
        if users_ids is not None:
            for user_id in users_ids:
                await self.event.api_ctx.friends.delete(user_id=user_id)
            return CommandResponse(response='[‚ôª] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π.')

        await self.event.api_ctx.friends.delete(user_id=user_id)
        return CommandResponse(
            response=f'[‚ôª] [id{user_id}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π.'
        )


@command_manager.register(
    ParseUserFilter(), name='add_block', module='social',
    aliases=['—á—Å+', '–±–ª–æ–∫+', 'bl+', 'block+'], priority=Priority.MEDIUM, args_syntax=[r'(\d+)', '']
)
class AddBlockHandler(BaseHandler):
    async def execute(
        self,
        user_id: Optional[int] = None,
        users_ids: Optional[List[int]] = None
    ) -> CommandResponse:
        if users_ids is not None:
            for user_id in users_ids:
                await self.event.api_ctx.account.ban(owner_id=user_id)
            return CommandResponse(response='[üí£] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫.')

        await self.event.api_ctx.account.ban(owner_id=user_id)
        return CommandResponse(
            response=f'[üí£] [id{user_id}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫.'
        )


@command_manager.register(
    ParseUserFilter(), name='remove_block', module='social',
    aliases=['—á—Å-', '–±–ª–æ–∫-', 'bl-', 'block-'], priority=Priority.MEDIUM, args_syntax=[r'(\d+)', '']
)
class RemoveBlockHandler(BaseHandler):
    async def execute(
        self,
        user_id: Optional[int] = None,
        users_ids: Optional[List[int]] = None
    ) -> CommandResponse:
        if users_ids is not None:
            for user_id in users_ids:
                await self.event.api_ctx.account.unban(owner_id=user_id)
            return CommandResponse(response='[üí£] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.')

        await self.event.api_ctx.account.unban(owner_id=user_id)
        return CommandResponse(
            response=f'[üí£] [id{user_id}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.'
        )
