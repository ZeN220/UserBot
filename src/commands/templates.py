from typing import Optional, List

from vkwave.api import APIOptionsRequestContext
from vkwave.bots.utils.uploaders import DocUploader, VoiceUploader, PhotoUploader
from vkwave.types.objects import MessagesMessageAttachment

from src.services import HolderGateway
from src.sessions import Session
from .base import command_manager, CommandResponse, BaseHandler, Priority
from .filters import ParseDataFromReply, ParseDataFromFwd


@command_manager.register(
    ParseDataFromReply() | ParseDataFromFwd(), name='add_template', module='templates',
    aliases=['addtemplate', 'template+', '–¥–æ–±–∞–≤–∏—Ç—å—à–∞–±–ª–æ–Ω', '—à–∞–±–ª–æ–Ω+'], priority=Priority.MEDIUM,
    args_syntax=r'(?P<trigger>.+)'
)
class AddTemplateHandler(BaseHandler):
    async def execute(
        self,
        gateway: HolderGateway,
        session: Session,
        trigger: str,
        text: str,
        attachments: Optional[List[MessagesMessageAttachment]] = None,
    ) -> 'CommandResponse':
        if isinstance(trigger, int):
            return CommandResponse(
                response='[‚ö†] –ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –∏–∑ —Ü–∏—Ñ—Ä.'
            )
        if len(trigger) > 64:
            return CommandResponse(
                response='[‚ö†] –î–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 64 —Å–∏–º–≤–æ–ª–∞.'
            )

        owner_id = session.owner_id
        exists_template = await gateway.template.exists(trigger, owner_id)
        if exists_template:
            return CommandResponse(
                response=f'[‚ö†] –®–∞–±–ª–æ–Ω —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º ¬´{trigger}¬ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.'
            )

        if attachments is not None:
            attachments = await upload_attachments(
                attachments, session.user.api_context, owner_id
            )
        await gateway.template.create(
            trigger=trigger, owner_id=owner_id, answer=text, attachments=attachments
        )
        return CommandResponse(
            response=f'[üìñ] –®–∞–±–ª–æ–Ω —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º ¬´{trigger}¬ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.'
        )


@command_manager.register(
    name='get_templates', module='templates', aliases=['templates', '—à–∞–±–ª–æ–Ω—ã'],
    priority=Priority.MEDIUM
)
class GetTemplatesHandler(BaseHandler):
    async def execute(self, gateway: HolderGateway, session: Session) -> 'CommandResponse':
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–ª–æ–∂–µ–Ω–∏–π —É —à–∞–±–ª–æ–Ω–∞
        templates = await gateway.template.get_triggers_by_owner_id(session.owner_id)
        response = []
        for index, template in enumerate(templates):
            template_trigger, attachments_count = template
            if attachments_count > 0:
                response.append(
                    f'{index + 1}. {template_trigger}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–ª–æ–∂–µ–Ω–∏–π: {attachments_count}\n'
                )
                continue
            response.append(f'{index + 1}. {template_trigger}\n')
        answer = '\n'.join(response)
        return CommandResponse(
            response=f'[üìú] –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤: \n{answer}'
        )


@command_manager.register(
    name='delete_template', module='templates',
    aliases=['template-', 'deltemplate', '—à–∞–±–ª–æ–Ω-', '—É–¥–∞–ª–∏—Ç—å—à–∞–±–ª–æ–Ω'],
    priority=Priority.MEDIUM, args_syntax='(?P<trigger>.+)'
)
class DeleteTemplateHandler(BaseHandler):
    async def execute(
        self,
        gateway: HolderGateway,
        session: Session,
        trigger: str
    ) -> 'CommandResponse':
        owner_id = session.owner_id
        template = await gateway.template.get(trigger=trigger, owner_id=owner_id)
        if not template:
            return CommandResponse(
                response=f'[‚ö†] –®–∞–±–ª–æ–Ω —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º ¬´{trigger}¬ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.'
            )
        await gateway.template.delete(trigger=trigger, owner_id=owner_id)
        return CommandResponse(
            response=f'[üìï] –®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.'
        )


async def upload_attachments(
    attachments: List[MessagesMessageAttachment],
    api_context: APIOptionsRequestContext,
    peer_id: int
) -> List[str]:
    result = []
    for attachment in attachments:
        attachment = await upload_attachment(attachment, api_context, peer_id)
        result.append(attachment)
    return result


async def upload_attachment(
    attachment: MessagesMessageAttachment,
    api_context: APIOptionsRequestContext,
    peer_id: int
) -> str:
    audio_message = attachment.audio_message
    document = attachment.doc
    photo = attachment.photo
    """
    –ò–∑-–∑–∞ —Ç–æ–≥–æ, —á—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–ª–æ–∂–µ–Ω–∏–π —Ä–∞–∑–Ω—ã—Ö –≤–∏–¥–æ–≤, 
    –Ω–∞ –∫–∞–∂–¥–æ–µ –≤–ª–æ–∂–µ–Ω–∏–µ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–≤–æ–π –æ–±—ä–µ–∫—Ç –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
    """
    if audio_message is not None:
        url = audio_message.link_ogg
        uploader = VoiceUploader(api_context)
    elif document is not None:
        url = document.url
        uploader = DocUploader(api_context)
    elif photo is not None:
        url = photo.sizes[-1].url
        uploader = PhotoUploader(api_context)
    else:
        raise TypeError('This attachment type is not supported')

    attachment = await uploader.get_attachment_from_link(
        peer_id=peer_id, link=url
    )
    return attachment
