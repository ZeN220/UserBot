from typing import Optional, List

from vkwave.api import APIOptionsRequestContext

from .base import Module, BaseHandler, CommandResponse, Priority
from .filters import ParseUserFilter, ConversationFilter
from src.dispatching import UserEvent

chats_module = Module('chats')


@chats_module.register(
    ParseUserFilter(), ConversationFilter(from_chat=True), name='invite',
    aliases=['invite', '–¥–æ–±–∞–≤–∏—Ç—å'], args_syntax=r'(\d+)?'
)
class InviteHandler(BaseHandler):
    async def execute(
        self,
        event: UserEvent,
        api_context: APIOptionsRequestContext,
        user_id: Optional[int] = None,
        users_ids: Optional[List[int]] = None
    ) -> 'CommandResponse':
        chat_id = event.object.object.peer_id - 2e9
        if users_ids is not None:
            for user_id in users_ids:
                await api_context.messages.add_chat_user(
                    user_id=user_id, chat_id=chat_id, visible_messages_count=0
                )
            return CommandResponse(
                response='[üè†] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —á–∞—Ç.'
            )
        await api_context.messages.add_chat_user(
            user_id=user_id, chat_id=chat_id, visible_messages_count=0
        )
        return CommandResponse(
            response=f'[üè†] [id{user_id}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç.'
        )


@chats_module.register(
    ParseUserFilter(), ConversationFilter(from_chat=True), name='kick',
    aliases=['kick', '–∫–∏–∫'], priority=Priority.HIGH, args_syntax=r'(\d+)?'
)
class KickHandler(BaseHandler):
    async def execute(
        self,
        event: UserEvent,
        api_context: APIOptionsRequestContext,
        user_id: Optional[int] = None,
        users_ids: Optional[List[int]] = None
    ) -> 'CommandResponse':
        chat_id = event.object.object.peer_id - 2e9
        if users_ids is not None:
            for user_id in users_ids:
                await api_context.messages.remove_chat_user(
                    member_id=user_id, chat_id=chat_id
                )
            return CommandResponse(
                response='[üëÆ] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ —á–∞—Ç–∞.'
            )
        await api_context.messages.remove_chat_user(
            member_id=user_id, chat_id=chat_id
        )

        response = f'[üëÆ] [id{user_id}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] —É—Å–ø–µ—à–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ —á–∞—Ç–∞.'
        if user_id < 0:
            response = f'[üëÆ] [club{abs(user_id)}|–°–æ–æ–±—â–µ—Å—Ç–≤–æ] —É—Å–ø–µ—à–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–æ –∏–∑ —á–∞—Ç–∞.'
        return CommandResponse(response=response)


@chats_module.register(
    ParseUserFilter(), ConversationFilter(from_chat=True), name='set_admin',
    aliases=['admin+', '–∞–¥–º–∏–Ω+'], args_syntax=r'(\d+)?'
)
class SetAdminHandler(BaseHandler):
    async def execute(
        self,
        event: UserEvent,
        api_context: APIOptionsRequestContext,
        user_id: Optional[int] = None,
        users_ids: Optional[List[int]] = None
    ) -> 'CommandResponse':
        peer_id = event.object.object.peer_id
        if users_ids is not None:
            for user_id in users_ids:
                await api_context.api_request(
                    'messages.setMemberRole',
                    {'member_id': user_id, 'role': 'admin', 'peer_id': peer_id}
                )
            return CommandResponse(
                response='[ü§µ] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ —á–∞—Ç–∞.'
            )
        await api_context.api_request(
            'messages.setMemberRole',
            {'member_id': user_id, 'role': 'admin', 'peer_id': peer_id}
        )

        response = f'[ü§µ] [id{user_id}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞.'
        if user_id < 0:
            response = (
                f'[ü§µ] [club{abs(user_id)}|–°–æ–æ–±—â–µ—Å—Ç–≤–æ] '
                f'—É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞.'
            )
        return CommandResponse(response=response)


@chats_module.register(
    ParseUserFilter(), ConversationFilter(from_chat=True), name='remove_admin',
    aliases=['admin-', '–∞–¥–º–∏–Ω-'], args_syntax=r'(\d+)?'
)
class SetAdminHandler(BaseHandler):
    async def execute(
        self,
        event: UserEvent,
        api_context: APIOptionsRequestContext,
        user_id: Optional[int] = None,
        users_ids: Optional[List[int]] = None
    ) -> 'CommandResponse':
        peer_id = event.object.object.peer_id
        if users_ids is not None:
            for user_id in users_ids:
                await api_context.api_request(
                    'messages.setMemberRole',
                    {'member_id': user_id, 'role': 'member', 'peer_id': peer_id}
                )
            return CommandResponse(
                response='[üë∑] –° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.'
            )
        await api_context.api_request(
            'messages.setMemberRole',
            {'member_id': user_id, 'role': 'member', 'peer_id': peer_id}
        )

        response = f'[üë∑] –° [id{user_id}|–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–∞—Ç–∞.'
        if user_id < 0:
            response = (
                f'[üë∑] –° [club{abs(user_id)}|—Å–æ–æ–±—â–µ—Å—Ç–≤–∞] '
                f'—É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–∞—Ç–∞.'
            )
        return CommandResponse(response=response)
